/*
 * wm_supervisor.cpp
 *
 *  Created on: May 11, 2016
 *      Author: xhache
 */

#include "wm_supervisor/wm_supervisor.h"

namespace wm
{
	wmSupervisor::wmSupervisor(const ros::NodeHandle& nh, const std::string& armActionName, const std::string& baseActionName)
								:nh_(nh), moveArmAC_(armActionName, false), moveBaseAC_(baseActionName, false)
	{
		status_ = wm::STATUS_OK;

		safeVelocityPub_ = nh_.advertise<geometry_msgs::Twist>("safe_cmd_vel", 1);

		audioStreamSub_ = nh_.subscribe("output", 10, &wmSupervisor::audioSubscriberCallback, this);
		estopSignalSub_ = nh_.subscribe("estop_signal", 10, &wmSupervisor::estopSubscriberCallback, this);
		safeVelocitySub_ = nh_.subscribe("cmd_vel", 10, &wmSupervisor::safeVelocityCallback, this);

		robotStatusSrv_ = nh_.advertiseService("robot_status", &wmSupervisor::robotStatusService, this);
		recoverFromStopSrv_ = nh_.advertiseService("recover_from_estop", &wmSupervisor::recoverFromStopService, this);

		nh_.param("/wm_supervisor_node/watchdog_callback_rate", watchdogRate_, 10.0);
		watchdogTimer_ = nh_.createTimer(ros::Duration(1.0/watchdogRate_), &wmSupervisor::watchdogCallback, this);

		lastCallback_ = ros::Time::now();
	}

	wmSupervisor::~wmSupervisor()
	{

	}

	bool wmSupervisor::robotStatusService(wm_supervisor::robotStatus::Request& req, wm_supervisor::robotStatus::Response& res)
	{
		if (status_ == wm::STATUS_OK)
		{
			res.status = res.STATUS_OK;
		}
		else if (status_ == wm::STOP_COMMANDED)
		{
			res.status = res.STOP_COMMANDED;
		}

		return true;
	}

	bool wmSupervisor::recoverFromStopService(std_srvs::Empty::Request& req, std_srvs::Empty::Response& res)
	{
		status_ = wm::STATUS_OK;
		return true;
	}

	void wmSupervisor::audioSubscriberCallback(const std_msgs::String& msg)
	{
		if(msg.data.find(STOP_STR) != std::string::npos)
		{
			ROS_WARN("Heard \"STOP\"!!! Preempting all goals!");

			if(moveArmAC_.isServerConnected())
			{
				moveArmAC_.cancelAllGoals();
			}

			if(moveBaseAC_.isServerConnected())
			{
				moveBaseAC_.cancelAllGoals();
			}

			status_ = wm::STOP_COMMANDED;
		}

		return;
	}

	void wmSupervisor::estopSubscriberCallback(const std_msgs::String& msg)
	{
		lastCallback_ = ros::Time::now();

		if(true) //TODO
		{
			ROS_WARN("Received \"STOP\" signal from emergency stop button!!! Preempting all goals!");

			if(moveArmAC_.isServerConnected())
			{
				moveArmAC_.cancelAllGoals();
			}

			if(moveBaseAC_.isServerConnected())
			{
				moveBaseAC_.cancelAllGoals();
			}

			status_ = wm::STOP_COMMANDED;
		}

		return;
	}

	void wmSupervisor::watchdogCallback(const ros::TimerEvent& e)
	{
		double now = ros::Time::now().toSec();

		if ((now - lastCallback_.toSec()) > (1.0 / watchdogRate_))
		{
			ROS_WARN_ONCE("Last message was more than %f seconds ago!!! Preempting all goals!", now - lastCallback_.toSec());

			if(moveArmAC_.isServerConnected())
			{
				moveArmAC_.cancelAllGoals();
			}

			if(moveBaseAC_.isServerConnected())
			{
				moveBaseAC_.cancelAllGoals();
			}

			status_ = wm::STOP_COMMANDED;
		}
	}

	void wmSupervisor::safeVelocityCallback(const geometry_msgs::Twist& msg)
	{
		if (status_ == wm::STATUS_OK)
		{
			safeVelocityPub_.publish(msg);
		}
		return;
	}
} //namespace wm

int main(int argc, char **argv)
{
	ros::init(argc, argv, "wm_supervisor_node");
	ros::NodeHandle nh;

	std::string moveArmActionName = "/wm_arm_driver_node/execute_plan";
	nh.param("/wm_supervisor_node/move_arm_action_name", moveArmActionName, moveArmActionName);

	std::string moveBaseActionName = "/move_base";
	nh.param("/wm_supervisor_node/move_base_action_name", moveBaseActionName, moveBaseActionName);

	wm::wmSupervisor supervisor(nh, moveArmActionName, moveBaseActionName);
	
	while (ros::ok())
	{
		ros::spin();
	}

	return 0;
}
